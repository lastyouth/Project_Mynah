/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.24
 * Generated at: 2015-08-14 07:53:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.api;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import sips.common.lib.value.*;
import sips.common.lib.util.*;
import sips.dept.contents._Research;

public final class research_005fa_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("sips.common.lib.util");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("sips.common.lib.value");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("sips.dept.contents._Research");
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<?xml version=\"1.0\" encoding=\"utf-8\"?> \r\n");
      out.write("<ROOT>\r\n");

    ParamValue     parmValue = new ParamValue(); 
	_Research         research    = new _Research();
    ResultSetValue rset      = null;
    int cnt = 0;
    int tot = 0;
    int pre_research_q_id = 0;

    String  research_id     = request.getParameter("research_id");
    String  research_q_id     = request.getParameter("research_q_id");

    parmValue.put("research_id", research_id);
    parmValue.put("research_q_id", research_q_id);
    rset = research.getResearchAnswer(parmValue); 

    tot = rset.row();
    while(rset.next()) {
    	if (cnt == 0){
    		out.println("		<RESEARCH_id>"+rset.getString("research_id")+"</RESEARCH_id>");
    		out.println("		<RESEARCH_TITLE>"+rset.getString("title")+"</RESEARCH_TITLE>");
    		out.println("		<RESEARCH_STAT>"+rset.getString("stat")+"</RESEARCH_STAT>");
    		out.println("		<USER_CD>"+rset.getString("user_cd")+"</USER_CD>");
    	}
    	if (pre_research_q_id > 0 &&  pre_research_q_id < rset.getInt("research_q_id")){
        	out.println("		</RESEARCH_QUESTION>");
    	}
    	if (pre_research_q_id != rset.getInt("research_q_id")){
	    	out.println("		<RESEARCH_QUESTION>");
	    	out.println("			<QUESTION_ID>"+rset.getString("research_q_id")+"</QUESTION_ID>");
	    	out.println("			<QUESTION_TITLE>"+rset.getString("q_title")+"</QUESTION_TITLE>");
	    	out.println("			<QUESTION_NUM>"+rset.getString("q_num")+"</QUESTION_NUM>");
    	}
    	out.println("			<RESEARCH_ANSWER>");
    	out.println("				<ANSWER_NUM>"+rset.getString("a_num")+"</ANSWER_NUM>");
    	out.println("				<ANSWER_TITLE>"+rset.getString("a_title")+"</ANSWER_TITLE>");
    	out.println("			</RESEARCH_ANSWER>");
    	cnt++;
    	if (tot == cnt){
        	out.println("		</RESEARCH_QUESTION>");
    	}
		pre_research_q_id = rset.getInt("research_q_id");
    	
    }

      out.write("\r\n");
      out.write("</ROOT>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
