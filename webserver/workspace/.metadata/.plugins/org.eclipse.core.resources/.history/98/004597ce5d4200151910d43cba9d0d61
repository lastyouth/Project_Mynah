/*************************************************************************
. CLASS 명 : UtilityHelper
. 작 업 자 : 고은배
. 작 업 일 : 2003. 07. 01
. 기    능 : 일반적인 유틸리티 class
. ---------------------------- 변 경 이 력 --------------------------------
. 번호  작 업 자   작      업     일   변경내용                       비고
. ---- --------  -----------------  -------------------------    --------
.    1  고은배     2003년 07월 01일    최초작성
**************************************************************************/

/**
*기능 : 일반적인 유틸리티 class
*@author    고은배
*@version   1.0.1
*/

package sips.common.lib.util;

import java.util.*;

public class StringUtil extends org.apache.commons.lang.StringUtils {

	/**
	* 기능 : 줄바꿈을 &lt;BR&gt;로 대체한다.
    *        만약 입력되는 파라미터중 null값이 있으면 null을 반환한다.
    * @param   str       
	* @return  String
	*/
    public static String newLineToBr(String str) {
        return (str != null ? replace(str, "\n", "<BR>") : "");
    }

	/**
	* 기능 : token으로 연결된 문자열을 flag를 기준으로 각각 분해하여 새로운 저장소에 담아 반환한다.
    *        만약 입력되는 파라미터중 null값이 있으면 null을 반환한다.
    * @param   str       flag로 연결된 문자열
    * @param   token     flag(구분자) 기호
	* @return  String[]  분리된 데이터 셋
	*/
    public static String[] tokenToList(String str, String flag) {
        String[] list = null;
        if(str==null || flag==null) {
            System.out.println("[UtilHelper] tokenToList() : [[Warnning]] null값이 입력되었습니다.");
        }
        else {
            StringTokenizer token = new StringTokenizer(str, flag);
            list = new String[token.countTokens()];
            for(int i=0; token.hasMoreTokens(); i++) {
                list[i] = token.nextToken().trim();
            }
        }

        return list;
    }

	/**
	* 기능 : 문자열이 flag1으로 연결되어 있고, 그렇게 연결된 문자열들이 flag2로 다시 여러개 연결되어 있을 경우
	*        flag2을 기준으로 분리한뒤, flag1으로 다시 각각의 문자열을 분리하여 배열에 담은 뒤
	*        각각의 배열을 벡터에 담아 반환한다.
    *        만약 입력되는 파라미터중 null값이 있으면 null을 반환한다.
    *        예를 들면 tokenToList("20020101,20020201,20020301*1,2,3", "*", ",")
    *        이런 메소드가 호출 되었을 경우
    *        우선 "*"을 기준으로 두개의 문자열로 분리하고, 각각 두개의 문자열을 ","로 분리하여 배열에 담은뒤
    *        벡터에 두개의 배열을 담아 반환한다.
    * @param   str       변환할 문자열
    * @param   flag1     큰 단위의 구분자
    * @param   flag2     작은 단위의 구분자
	* @return  Vector    분리된 데이터 셋
	*/
    public static Vector tokenToList(String str, String flag1, String flag2) {
        Vector totalList   = null;
        String[] smallList = null; //첫번째 구분자를 분리하여 담는 배열
        if(str==null || flag1==null || flag2==null) {
            System.out.println("[UtilHelper] tokenToList() : [[Warnning]] null값이 입력되었습니다.");
        }
        else {
            totalList = new Vector();
            smallList = tokenToList(str, flag1);
            for(int i=0; i<smallList.length; i++) {
                totalList.add(tokenToList(smallList[i], flag2));
            }
        }

        return totalList;
    }

	/**
	* 기능 : 리스트 자료구조에 담겨져 있는 문자열을 입력된 flag로 연결하여 하나의 문자열로 반환한다.
    *        만약 입력되는 파라미터중 null값이 있으면 null을 반환한다.
    * @param   arr     연결할 문자열이 들어있는 자료구조
	* @return  String  flag로 연결된 새로운 문자열
	*/
    public static String listToToken(String[] arr, String flag) {
        String tokenStr = "";
        if(arr==null || flag==null) {
            System.out.println("[UtilHelper] listToToken() : [[Warnning]] Input data is null.");
        }
        else {
            StringBuffer buffer = new StringBuffer();
            for(int i=0; i<arr.length; i++)
                buffer.append((arr[i]==null ? "" : arr[i].trim()) + flag);
            tokenStr = buffer.toString().substring(0, buffer.length()-1);
        }

        return tokenStr;
    }


	/**
	* 기능 : 입력된 스트링 배열의 각 요소에 flag 기호를 붙인뒤, 배열의 순서대로
	*        하나의 문자열로 연결하여 반환한다.
	*        (문자열을 붙일때 구분자는 ","를 사용한다.)
	*        SQL문의 WHERE 조건 중에서 IN 조건을 사용시 편리하다.
    * @param   arr      변경할 스트링 배열
    * @param   flag     스트링에 붙일 기호
	* @return  String   하나로 연결된 문자열
	*/
    public static String addFlag(String arr[], String flag) {
        String newStr = "";
        if(arr==null || flag==null) {
            System.out.println("[UtilHelper] addFlag() : [[Warnning]] Input data is null.");
        }
        else {
            try {
                for(int i=0; i<arr.length; i++) {
                    newStr += ", " + flag + arr[i] + flag;
                }
            }
            catch(Exception e) {
                newStr = "";
            }
        }

        return (newStr.length() > 2) ? newStr.substring(2, newStr.length()) : "";
    }

	/**
	* 기능 : 입력된 스트링에 flag 기호를 붙여 반환한다.
	*        SQL문의 WHERE 조건 중에서 IN 조건을 사용시 편리하다.
    * @param   str      변경할 문자열
    * @param   strFlag  문자열의 구분자
    * @param   flag     새로운 스트링에 붙일 기호
	* @return  String    새로 생성된 문자열
	*/
    public static String addFlag(String str, String strFlag, String flag) {
        String newStr = "";
        int flaLength = 0;
        if(str==null || strFlag==null || flag==null) {
            System.out.println("[UtilHelper] addFlag() : [[Warnning]] Input data is null.");
        }
        else {
            StringTokenizer token = new StringTokenizer(str, strFlag);
            flaLength = strFlag.length();
            try {
                while (token.hasMoreTokens()) {
                    newStr += (strFlag + flag + token.nextToken() + flag);
                }
            }
            catch(Exception e) {
                newStr = "";
            }
        }

        return (newStr.length() > flaLength) ? newStr.substring(flaLength, newStr.length()) : "";
    }


	/**
	* 기능 : 입력된 스트링에 flag 기호를 찾아 삭제한 후 문자열을 반환한다.
    * @param   str      변경할 문자열
    * @param   flag     삭제할 기호
	* @return  String   삭제된 문자열
	*/
    public static String removeFlag(String str, String flag) {
        if(str==null || flag==null) {
            System.out.println("[UtilHelper] removeFlag() : [[Warnning]] Input data is null.");
        }
        else {
            try {
                int flagLength = flag.length();
                int findIndex = str.indexOf(flag);
                int fromIndex = 0;
                while(findIndex > -1) {
                    str = str.substring(0, findIndex) + str.substring(findIndex + flagLength, str.length());
                    fromIndex = findIndex;
                    findIndex = str.indexOf(flag, fromIndex);
                }
            }
            catch(Exception e) {
                str = "";
            }
        }

        return str;
    }


    /**
     * 텍스트의 길이를 체크한다.
     * 한글처리시 자바에서는 유니코드로 처리하기 때문에 byte로 변환하여 체크한다.
     * 2003.10.27. 하정연 추가
     *
     * @param    String    텍스트
     * @param    int       max length byte
     * @return   boolean
     */
    public static boolean chkStringLen(String sStr, int iLen) {

        String sTemp = "";
        byte[] bTemp ;
        boolean rtnFlag = false;

        if(sStr==null || sStr.length()==0) {
            rtnFlag = false;
        } else {
            bTemp = sStr.getBytes();

            if( iLen >= bTemp.length ) {
                rtnFlag = true;
            }
        }
        return rtnFlag;
    }

    /**
	 * substring 은 영문/한글에 상관없이 length 체크만 하지만,
	 * cropByte 는 byte 에 의해 체크한다.
	 * 기능 문자열 바이트수만큼 끊어주고, 생략표시하기
	 * @param str 문자열
	 * @param i 바이트수
	 * @param trail 생략 문자열. 예) "..."
	 * @return String
	 * @version   1.0
	 */
	public static String cropByte(String str, int i, String trail) {
    	if (str==null) return "";
    	String tmp = str;
    	int slen = 0, blen = 0;
    	char c;
    	try {
        	if(tmp.getBytes("MS949").length>i) {
        		while (blen+1 < i) {
        			c = tmp.charAt(slen);
        			blen++;
        			slen++;
        			if ( c  > 127 ) blen++;  //2-byte character..
        		}
        		tmp=tmp.substring(0,blen)+trail;
        	}
        } catch(java.io.UnsupportedEncodingException e) {}
    	return tmp;
    }
     
    /**
    * 파라미터값 text값의 길이가  파라미터값 dispSize값보다 크면 dispSize값만큼 글자를 보여주고 ".."을 붙여주여 반환한다...
    * 단,dispSize값을 한글 기준으로
    * 예: FuncLib. trimTextKor("hi,jun~~~~~~",3) 반환값: "hi,jun..  "
    * @param       text - 날짜
    * @param       dispSize - 날짜
    */
   public static String trimTextKor(String text, int dispSize) {
     String str = text;
     int korLen = 0;
     int i = 0;
     dispSize = dispSize*2;
System.out.println("text="+text+",dispSize="+dispSize);

     for (; (i<text.length() && korLen<=dispSize); i++) {
       if (Character.getType(text.charAt(i))==Character.OTHER_LETTER)
         korLen += 2;
       else
         korLen++;
     }

     if (korLen > dispSize)
       str = text.substring(0, i-1) + "..";

     return(str);
   }

	/**
    *기능 : Replace String
    *       str에서 rep에 해당하는 String을 tok로 replace
    *@param  str  string
    *@param  rep  string
    *@param  tok  string
    *@return  새로운 string
    */
    public static String getReplace(String str, String rep, String tok)
    {
        String retStr = "";

        if (str == null) return "";
        if (str.equals("")) return "";

        for (int i = 0, j = 0; (j = str.indexOf(rep,i)) > -1 ; i = j+rep.length()) {
            retStr += (str.substring(i,j) + tok);
        }
        return (str.indexOf(rep) == -1) ? str : retStr + str.substring(str.lastIndexOf(rep)+rep.length(),str.length());
    }
    
    
    /**
    * 입력된 문자열에서 해당 HTML 태그를 삭제하여 순수한 문자열만을 반환한다.
    * @param  str1    문자열
    * @return String  HTML 태그가 삭제된 문자열
    */
	public static String removeHTMLTag(String str){ 
        str = getReplace(str, "&", "&amp;");
        str = getReplace(str, "<", "&lt;");
        str = getReplace(str, ">", "&gt;");
        str = getReplace(str, "'", "&acute;");
        str = getReplace(str, "\"", "&cute;");
        str = getReplace(str, "|", "&brvbar;");

        //개행문자 제거        
        str = getReplace(str, "\r\n", "<BR>");
        str = getReplace(str, "\r", "<BR>");
        str = getReplace(str, "\n", "<BR>"); 
         
        //스페이스를 &nbsp;로 수정
        //str = util.getReplace(str, " ", "&nbsp;");

        return str;
	}
	
    /**
	* 기능 : 입력된 문자열의 오른쪽에 index의 길이만큼 문자열을 붙여 반환한다.
    * param    str     문자열
    * param    index   문자열이 붙여진 후 최종 문자열의 길이
    * param    addStr  추가하여 붙일 문자
	* @return  String  추가된 문자열
	*/
    public static String fillRigth(String str, int index, String addStr) {
        int gap = 0;
        if ((str != null) && (addStr != null) && (str.length() <= index)) {
            gap = index - str.length();

            for(int i=0 ; i<gap ; i++) {
                str = str + addStr;
            }
        }
        else {
            //log("[UtilHelper] fillRigth() : [[Warnning]] Input data is null.");
        }

        return str;
    }

	/**
	* 기능 : 입력된 문자열의 왼쪽에 index의 길이만큼 문자열을 붙여 반환한다.
    * param    str     문자열
    * param    index   문자열이 붙여진 후 최종 문자열의 길이
    * param    addStr  추가하여 붙일 문자
	* @return  String  추가된 문자열
	*/
    public static String fillLeft(String str, int index, String addStr) {
        int gap = 0;
        if ((str!=null) && (addStr!=null) && (str.length()<=index)) {
            gap = index - str.length();

            for(int i=0 ; i<gap ; i++) {
                str = addStr + str;
            }
        }
        else {
            //log("[UtilHelper] fillLeft() : [[Warnning]] Input data is null.");
        }

        return str;
    }
    
    public static String RND(int nLng, String sStartChar){
        Random random;
        int    nMAX_LNG = 12;
        String RNDValue = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
   
        nMAX_LNG = nLng;
        random   = new Random();
        
        StringBuffer sTemp = new StringBuffer(sStartChar); 
        for(int i = 1; i < nMAX_LNG; i++) {
            int nRnd = random.nextInt(36);
            sTemp.append(RNDValue.substring(nRnd, nRnd+1));
        }
   
        return sTemp.toString();
    } 
    
    public static String strMatch(String matchString, String findString){  
    	String returnString = "";
    	if (matchString.matches(".*"+findString+".*")){
    		returnString = findString ;
    	}else{
        	  returnString = "0" ;
    	}

        return returnString;
    } 
    
    // 2011-09-21 오후 5:29:35
    public static String removeTag(String tags) throws Exception {
        String line = "";
        String buf  = tags;
        
        int begin     = 0;
        int end       = 0;
        int old_begin = 0;
        int old_end   = 0;
        
        if( tags != null && !"".equals(tags) ){
            buf = buf.toLowerCase();
            
            String result = "";
            while(true){
                if( (begin = buf.indexOf("<script", begin)) == -1 ){
                    break;
                }
                if( (end = buf.indexOf("</script>", end)) == -1 ){
                    break;
                }
                if( end > begin ){
                    result += buf.substring(old_begin, begin);
                    old_begin = end + 9;
                }
                ++end;
                ++begin;
            }
            if( end > begin ){
                result += buf.substring(end+9);
            }
            /* html 태그 제거 */
            buf    = result.replaceAll("&[a-z]+;","");
            buf    = buf.replaceAll("(<([a-z!/]+)[^>]*>)|([\\t\\x0B\\f]+)|(([\\r\\n][\\r\\n])+)|(-->)",""); 
            
            result = buf;
            /* 
            // 공백제거
            buf    = "";
            int len = result.length();
            int i=0;
            
            while(len > i){
                while( (len > i) && (result.charAt(i) == ' ') ) {
                    ++i;
                }
                while( (len > i) && (result.charAt(i) != ' ') ){
                    buf += result.charAt(i++);
                }
                if( len > i ){
                    buf += "";
                } 
            }
            */
        }
        return buf;
    }
    
    /**
     * 절상, 절하, 반올림 처리
     * @param strMode  - 수식
     * @param nCalcVal - 처리할 값(소수점 이하 데이터 포함)
     * @param nDigit   - 연산 기준 자릿수(오라클의 ROUND함수 자릿수 기준)
     *                   -2:십단위, -1:원단위, 0:소수점 1자리
     *                   1:소수점 2자리, 2:소수점 3자리, 3:소수점 4자리, 4:소수점 5자리 처리
     * @return String nCalcVal
     */
    public static String calcMath(String strMode, double nCalcVal, int nDigit) {
        if(strMode.equals("ROUND")) {        //반올림
            if(nDigit < 0) {
                nDigit = -(nDigit);
                nCalcVal = Math.round(nCalcVal / Math.pow(10, nDigit)) * Math.pow(10, nDigit);
            } else {
                nCalcVal = Math.round(nCalcVal * Math.pow(10, nDigit)) / Math.pow(10, nDigit);
            }
        } else if(strMode.equals("CEIL")) {  //절상
            if(nDigit < 0) {
                nDigit = -(nDigit);
                nCalcVal = Math.ceil(nCalcVal / Math.pow(10, nDigit)) * Math.pow(10, nDigit);
            } else {
                nCalcVal = Math.ceil(nCalcVal * Math.pow(10, nDigit)) / Math.pow(10, nDigit);
            }
        } else if(strMode.equals("FLOOR")) { //절하
            if(nDigit < 0) {
                nDigit = -(nDigit);
                nCalcVal = Math.floor(nCalcVal / Math.pow(10, nDigit)) * Math.pow(10, nDigit);
            } else {
                nCalcVal = Math.floor(nCalcVal * Math.pow(10, nDigit)) / Math.pow(10, nDigit);
            }
        } else {                        //그대로(무조건 소수점 첫째 자리에서 반올림)
            nCalcVal = Math.round(nCalcVal);
        }
        return String.valueOf(nCalcVal);
    }
    
}
