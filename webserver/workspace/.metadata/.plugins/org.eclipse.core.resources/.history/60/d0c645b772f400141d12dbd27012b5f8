
var http = require('http');
var https = require('https');
var fs = require('fs');
var crypto = require('crypto');
var multiparty = require('multiparty');
var util = require('util');
var mysql = require('mysql');


var connection = mysql.createConnection({
	host : "192.168.35.75",
	port : 3306,
	user : "mynah",
	password : "mynah",
	database : "mynah_test"
});

var sqlQueryTest = "SELECT * FROM users";

function callback(err, rows, fields){
	if(err){
		throw err;
	}
	for(var i=0; i<rows.length; i++){
		console.log(rows[i].seq+"|"+rows[i].id+"|"+rows[i].passwd);
	}
}

var httpsServer;
var httpServer;

// https verification options
var options = {
  key: fs.readFileSync('private_key.pem'),
  cert: fs.readFileSync('cert.pem')
};

//http port
var port = 13337;
// https port
var sslport = 13337;

function ProcessPostRequest(res,err,fields,files)
{
	if(fields === undefined)
	{
		// 이 경우는 무시
		console.log("essential property is missing!");
		console.log(fields);
		
		res.writeHead(200, {'type' : 'text','src' : 'NONE','order' : 'null'});
		res.end('EMISSING');
		console.log("-status : EMISSING");
		return;
	}
	// 잘못된 요청
	
	if(fields.hasOwnProperty('id') === false || fields.hasOwnProperty('passwd') === false){
		console.log("essential property is missing!");
		console.log(fields);
		
		res.writeHead(200, {'type' : 'text','src' : 'NONE','order' : 'null'});
		res.end('EMISSING');
		console.log("-status : EMISSING");
	}
	else{
		var uniqueNumber = fields.uniqueNumber;
		var type = fields.type;
		
		console.log("uniqueNumber : " + uniqueNumber);
		console.log("type : " + type);
		
		uniqueNumber = uniqueNumber.toString();
		type = type.toString();
	}
}


//functions
function HttpsEventProcessCallback(req,res)
{
	//console.log(req);
	var date = new Date();
	console.log("\r\nhttps request arriving!" + date.toUTCString()+"\r\n");
	
	if (req.method === 'POST'){
		// use multiparty module
		//res.end('POST request');
		var form = new multiparty.Form();		
		form.uploadDir = 'C:/Users/HJHOME/workspace/hello';

		/*
	    form.parse(req, function(err, fields, files){
	    	ProcessPostRequest(res, err, fields, files);
	    });
	    */
		
		var chunk = "";
		
		req.on('data', function(data){
			chunk = JSON.parse(data);
		});
		
		
		req.on('end', function(){
			res.writeHead(200, {'Content-Type': 'text/plain; charset=utf-8'});
			var messagetype = chunk.messagetype;
			console.log("messagetype : " + messagetype);
			
			if(messagetype == 'login'){
				console.log("id : " + chunk.id + " / passwd : " + chunk.passwd);
			}
			else if(messagetype == 'send_tts'){
				console.log("sentense : " + chunk.sentense);
			}
		})
		alert('gg');
		res.write("OK");
		res.end('JSON OK');
	    
    }
	else{
		// 포스트가 아니면 에러
		res.writeHead(200, {'Content-Type': 'text/plain'});
		res.end('wrong request');
	}
}
function HttpEventProcessCallback(req,res)
{
	// http request from port 8010
	
	res.writeHead(200, {'Content-Type': 'text/plain'});
	res.end('request');
	var date = new Date();
	console.log("\r\nhttp request arriving!" + date.toUTCString()+"\r\n");
	//res.end('wrong request');
	
}

httpsServer = https.createServer(options,HttpsEventProcessCallback);
//httpServer = http.createServer(HttpEventProcessCallback);

//http.createServer(function handler(req, res) {
//    res.writeHead(200, {'Content-Type': 'text/plain'});
//    res.end('Hello World HJHOME\n');
//}).listen(sslport, '192.168.35.75');

httpsServer.listen(sslport, '192.168.35.75');
console.log('Server running at https://192.168.35.75:13337/');

//httpServer.listen(port, '192.168.35.75');
//console.log('Server running at http://192.168.35.75:13337/');

connection.connect();
connection.query(sqlQueryTest, callback);
connection.end();