var http = require('http');
var https = require('https');
var fs = require('fs');
var mysql = require('mysql');
var gcm = require('node-gcm');

//var gcm_message = new gcm.Message();

var basic_jobj = {
		messagetype : "",
		result : "",
		attach : ""
}

//구글에서 발행한 key
var server_access_key = 'AIzaSyAn_popA7yY_6O8U8yDcDv1Z3_lDGdtGxM';
var sender = new gcm.Sender(server_access_key);

var connection = mysql.createConnection({
	host : "192.168.35.75",
	port : 3306,
	user : "hiik",
	password : "hiik",
	database : "hiik_mynah"
});

var httpsServer;
var httpServer;

// https verification options
var options = {
	key : fs.readFileSync('private_key.pem'),
	cert : fs.readFileSync('cert.pem')
};

// http port
var port = 13337;
// https port
var sslport = 13337;

//https를 통해 정상적으로 request가 왔을 때 실행되는 함수, request 종류에 따라 알맞는 작업 수행 후 다시 app으로 response
function HttpsEventProcessCallback(req, res) {
	// console.log(req);
	res.writeHead(200, {
		'Content-Type' : 'text/plain; charset=utf-8'
	});

	//res.write('안녕하세요');
	var date = new Date();
	console.log("\r\nhttps request arriving! " + date.toUTCString() + "\r\n");

	//post방식으로 메세지가 정상 도착 했을 때
	if (req.method === 'POST') {		
		console.log('post request!');

		var chunk = ""; //json 받는 변수

		req.on('data', function(data) {
			//console.log(data.toString());
			var decoded_data = new Buffer(data.toString(), 'base64').toString(); // base64 인코딩 된 json을 base64로 다시 디코딩
			//console.log(decoded_data);
			chunk = JSON.parse(decoded_data);// json을 파싱하여 JSON OBJECT 형태로 변수에 저장
			console.log(chunk);
		});
		req.on('end', function() {
			res.writeHead(200, {
				'Content-Type' : 'text/plain; charset=utf-8'
			});
			var messagetype = chunk.messagetype;//messagetype, 이것에 따라서 하는 일이 바뀜
			console.log("messagetype : " + messagetype);
			
			if (messagetype == 'login') {
				//login 시;
				
			} 
			else if (messagetype == 'sign_up') {
				//회원가입
				var sql_query = "INSERT INTO user_info" 
					+ " (product_id, reg_id, device_id, user_name, reg_date) "
					+ "values(\'"
					+ chunk.product_id + "\', \'" + chunk.reg_id + "\', \'"
					+ chunk.device_id + "\', \'" + chunk.user_name
					+ "\', now());";
				
				console.log('sign_up query : ' + sql_query);
				
				var query = connection.query(sql_query, function(err) {
					if (err) {
						console.log('err : ' + err);
						var jobj = basic_jobj;
						jobj.messagetype = messagetype;
						jobj.result = "EMAIL_SIGN_UP_FAIL";
						console.log(JSON.stringify(jobj));
						res.end(base64_encode(JSON.stringify(jobj)));
					} else {
						var jobj = basic_jobj;
						jobj.messagetype = messagetype;
						jobj.result = "EMAIL_SIGN_UP_SUCCESS";
						console.log(JSON.stringify(jobj));
						res.end(base64_encode(JSON.stringify(jobj)));
					}
				});
			}//if messagetype = email_sign_up END
			//if messagetype = get_user_info
			else if(messagetype == 'get_user_info'){
				//사용자 id를 받아서 그 id로 정보 받아서 앱으로 보내줘
				var sql_query = "SELECT user_seq, id_flag, user_id, name, company, " +
						"picture, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', phone, null) AS phone, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', email, null) AS email, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', address, null) AS address, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', authority_kind, null) AS authority_kind, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', phone_1, null) AS phone_1, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', phone_2, null) AS phone_2, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', cell_phone_1, null) AS cell_phone_1, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', cell_phone_2, null) AS cell_phone_2, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', business_card_code, null) AS business_card_code, " +
						"business_card_share_flag, " +
						"if(business_card_share_flag = 1 OR user_seq = \'" + chunk.session_user_seq + "\', phone, null) AS nation_code, " +
						"duty " +
						"FROM user_info "
						+ "WHERE user_seq=\'" + chunk.user_seq + "\' LIMIT 1;";
				
				console.log('get_user_info query : ' + sql_query);
				
				var query = connection.query(sql_query, function (err, rows, fields) {
					if (err) {
						var jobj = basic_jobj;
						jobj.messagetype = messagetype;
						jobj.result = "GET_USER_INFO_ERROR";
						console.log(JSON.stringify(jobj));
						res.end(base64_encode(JSON.stringify(jobj)));
						//throw err;
					}
					else{
						if(rows.length == 0){
							var jobj = basic_jobj;
							jobj.messagetype = messagetype;
							jobj.result = "GET_USER_INFO_FAIL";
							console.log(JSON.stringify(jobj));
							res.end(base64_encode(JSON.stringify(jobj)));
						}
						else{
							var jobj = basic_jobj;
							jobj.messagetype = messagetype;
							jobj.result = "GET_USER_INFO_SUCCESS";
							
							//파일 디코딩해서 Base64String 으로 바꿔줘
							var image_origial = "./profile/" + rows[0].picture;
							
							if(rows[0].picture == null || (rows[0].business_card_share_flag == '0' && rows[0].user_seq != chunk.session_user_seq)){
								jobj.attach = rows[0];
								console.log(JSON.stringify(jobj));
								res.end(base64_encode(JSON.stringify(jobj)));
								jobj.attach = "";
							}
							else{
								fs.readFile(image_origial, function(err, buffer){
									var base64Image = new Buffer(buffer, 'binary').toString('base64');
									rows[0].picture = base64Image; 
									
									jobj.attach = rows[0];
									
									console.log(JSON.stringify(jobj));
									res.end(base64_encode(JSON.stringify(jobj)));
									jobj.attach = "";
								});
							}
						}
					}
				});
				basic_jobj.attach = ""; //얕은복사인가.. 초기화가필요하네
			}//if messagetype = get_user_info END
			else{
				//그냥 https post 리퀘스트였을 때
				res.end('Hi There');
			}

		});
	}
	else {
		// 포스트가 아니면 에러
		res.writeHead(200, {
			'Content-Type' : 'text/plain; charset=utf-8'
		});
		console.log('NOT POST REQUEST');
		res.end('wrong request');
	}
}

function base64_decode(base64str, file) {
	// create buffer object from base64 encoded string, it is important to tell the constructor that the string is base64 encoded
	var bitmap = new Buffer(base64str, 'base64');
	// write buffer to file
	fs.writeFileSync(file, bitmap);
	console.log('******** File created from base64 encoded string ********');
}

//http 리퀘스트 함수. 임시.
function HttpEventProcessCallback(req, res) {
	// http request from port 13337
	res.writeHead(200, {
		'Content-Type' : 'text/plain'
	});
	res.end('request');
	var date = new Date();
	console.log("\r\nhttp request arriving!" + date.toUTCString() + "\r\n");

}

httpsServer = https.createServer(options, HttpsEventProcessCallback);

httpsServer.listen(sslport, '192.168.35.75');
connection.connect();
console.log('Server running at https://192.168.35.75:13337/');
